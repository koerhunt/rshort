// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rshort.proto

package rshort

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//Url cut request
type CutUrlRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CutUrlRequest) Reset()         { *m = CutUrlRequest{} }
func (m *CutUrlRequest) String() string { return proto.CompactTextString(m) }
func (*CutUrlRequest) ProtoMessage()    {}
func (*CutUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d798eca32378ddf, []int{0}
}

func (m *CutUrlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CutUrlRequest.Unmarshal(m, b)
}
func (m *CutUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CutUrlRequest.Marshal(b, m, deterministic)
}
func (m *CutUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CutUrlRequest.Merge(m, src)
}
func (m *CutUrlRequest) XXX_Size() int {
	return xxx_messageInfo_CutUrlRequest.Size(m)
}
func (m *CutUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CutUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CutUrlRequest proto.InternalMessageInfo

func (m *CutUrlRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CutUrlRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

//The responde with status and response data
type CutUrlReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CutUrlReply) Reset()         { *m = CutUrlReply{} }
func (m *CutUrlReply) String() string { return proto.CompactTextString(m) }
func (*CutUrlReply) ProtoMessage()    {}
func (*CutUrlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d798eca32378ddf, []int{1}
}

func (m *CutUrlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CutUrlReply.Unmarshal(m, b)
}
func (m *CutUrlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CutUrlReply.Marshal(b, m, deterministic)
}
func (m *CutUrlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CutUrlReply.Merge(m, src)
}
func (m *CutUrlReply) XXX_Size() int {
	return xxx_messageInfo_CutUrlReply.Size(m)
}
func (m *CutUrlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CutUrlReply.DiscardUnknown(m)
}

var xxx_messageInfo_CutUrlReply proto.InternalMessageInfo

func (m *CutUrlReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CutUrlReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*CutUrlRequest)(nil), "rshort.CutUrlRequest")
	proto.RegisterType((*CutUrlReply)(nil), "rshort.CutUrlReply")
}

func init() { proto.RegisterFile("rshort.proto", fileDescriptor_9d798eca32378ddf) }

var fileDescriptor_9d798eca32378ddf = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2a, 0xce, 0xc8,
	0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x8c, 0xb9, 0x78,
	0x9d, 0x4b, 0x4b, 0x42, 0x8b, 0x72, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8,
	0x98, 0x4b, 0x8b, 0x72, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x90, 0x48, 0x76,
	0x6a, 0xa5, 0x04, 0x13, 0x44, 0x24, 0x3b, 0xb5, 0x52, 0xc9, 0x92, 0x8b, 0x1b, 0xa6, 0xa9, 0x20,
	0xa7, 0x52, 0x48, 0x8c, 0x8b, 0xad, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x18, 0xac, 0x8b, 0x35, 0x08,
	0xca, 0x13, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x84, 0xea, 0x04, 0xb3, 0x8d, 0x9c, 0xb8,
	0x38, 0x82, 0xc0, 0x36, 0xa7, 0x16, 0x09, 0x99, 0x71, 0xb1, 0x81, 0x8c, 0x09, 0xf2, 0x11, 0x12,
	0xd5, 0x83, 0x3a, 0x0e, 0xc5, 0x2d, 0x52, 0xc2, 0xe8, 0xc2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x4e,
	0xd2, 0x5c, 0xfc, 0xd9, 0xf9, 0xa9, 0x45, 0x19, 0xa5, 0x79, 0x25, 0x50, 0x05, 0x4e, 0x6c, 0x41,
	0xc1, 0x20, 0x3a, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x3f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0xf1, 0xf7, 0x0d, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RshorterClient is the client API for Rshorter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RshorterClient interface {
	CutURL(ctx context.Context, in *CutUrlRequest, opts ...grpc.CallOption) (*CutUrlReply, error)
}

type rshorterClient struct {
	cc *grpc.ClientConn
}

func NewRshorterClient(cc *grpc.ClientConn) RshorterClient {
	return &rshorterClient{cc}
}

func (c *rshorterClient) CutURL(ctx context.Context, in *CutUrlRequest, opts ...grpc.CallOption) (*CutUrlReply, error) {
	out := new(CutUrlReply)
	err := c.cc.Invoke(ctx, "/rshort.Rshorter/CutURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RshorterServer is the server API for Rshorter service.
type RshorterServer interface {
	CutURL(context.Context, *CutUrlRequest) (*CutUrlReply, error)
}

func RegisterRshorterServer(s *grpc.Server, srv RshorterServer) {
	s.RegisterService(&_Rshorter_serviceDesc, srv)
}

func _Rshorter_CutURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CutUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RshorterServer).CutURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rshort.Rshorter/CutURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RshorterServer).CutURL(ctx, req.(*CutUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rshorter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rshort.Rshorter",
	HandlerType: (*RshorterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CutURL",
			Handler:    _Rshorter_CutURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rshort.proto",
}
